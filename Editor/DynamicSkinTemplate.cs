// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DynamicSkinBuilder
{
    using RoRSkinBuilder.Data;
    using RoRSkinBuilder;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class DynamicSkinTemplate : DynamicSkinTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using BepInEx.Logging;
using RoR2;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using RuneFoxMods;
using DynamicSkinBuilder;
using MonoMod.RuntimeDetour;


//NameSpace and SkinName are generated from SkinDef Generator
namespace ");
            
            #line 15 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dynamicSkin.assetInfo.uccModName));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n  public partial class ");
            
            #line 17 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dynamicSkin.assetInfo.uccModName));
            
            #line default
            #line hidden
            this.Write("Plugin \r\n  {\r\n    ///////////////////////////////////////////////////////////\r\n  " +
                    "  /// Add Declerations of all Modifications here\r\n");
            
            #line 21 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 foreach(var mod in dynamicSkin.DynamicModifications) {
            
            #line default
            #line hidden
            this.Write("    Modification ");
            
            #line 22 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.skinDef.name + mod.prefab.name));
            
            #line default
            #line hidden
            this.Write("Modification;\r\n");
            
            #line 23 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"    ///
    ///////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    /// Local Declarations
    public static Dictionary<string, SkinDef> SkinDefs = new System.Collections.Generic.Dictionary<string, SkinDef>();
    private static GameObject LastModelObject;

    //private static readonly Dictionary<GameObject, Modification> appliedModificatons = new Dictionary<GameObject, Modification>();
    private static List<Modification> ModificationList = new List<Modification>();//storage for modifications
    private static Dictionary<GameObject, AppliedModifications> ModifiedObjects = new Dictionary<GameObject, AppliedModifications>();

    //This uses Name of class 
    //private static SkinNamePlugin Instance { get; set; }
    //private static ManualLogSource InstanceLogger => Instance?.Logger;
    /// Local Declarations
    ///////////////////////////////////////////////////////////


    partial void BeforeStart()
    {
      Instance = this;

      //On.RoR2.SkinDef.Apply += SkinDefApply; //Old hook for use w/ mmhook
      new Hook(typeof(SkinDef).GetMethod(nameof(SkinDef.Apply)), (Action<Action<SkinDef, GameObject>, SkinDef, GameObject>) SkinDefApply).Apply();
    }

    partial void AfterStart()
    {
      //////////////////////////////////////////////////
      //Should Load all modifications here
");
            
            #line 55 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 foreach(var mod in dynamicSkin.DynamicModifications) {
      //ModificationName = new Modification("PrefabName.prefab", "ParentName", "BodyName", "SkinNameToken" false, assetBundle);

            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 58 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.skinDef.name + mod.prefab.name));
            
            #line default
            #line hidden
            this.Write("Modification = new Modification(\"");
            
            #line 58 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.prefab.name));
            
            #line default
            #line hidden
            this.Write(".prefab\", \"");
            
            #line 58 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.parentBone.name));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 58 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.skinDef.bodyName));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 58 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.skinDef.CreateNameToken(dynamicSkin.modInfo.author)));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 58 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.affectsBaseModel?"true":"false"));
            
            #line default
            #line hidden
            this.Write(", assetBundle);\r\n");
            
            #line 59 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("      \r\n");
            
            #line 61 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 foreach(var mod in dynamicSkin.DynamicModifications) { 
      //ModificationName.dynamicBoneData = null; //get from DB reader

            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 64 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.skinDef.name + mod.prefab.name));
            
            #line default
            #line hidden
            this.Write("Modification.dynamicBoneData = ");
            
            #line 64 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DynamicBoneReader.CreateConstructor(mod.dynamicBone)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 65 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n      //add mods to mod list\r\n");
            
            #line 68 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 foreach(var mod in dynamicSkin.DynamicModifications) { 
      //ModificationList.Add(ModificationName);

            
            #line default
            #line hidden
            this.Write("      ModificationList.Add(");
            
            #line 71 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.skinDef.name + mod.prefab.name));
            
            #line default
            #line hidden
            this.Write("Modification);\r\n");
            
            #line 72 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("      //Should Load all modifications here\r\n      ///////////////////////////////" +
                    "///////////////////\r\n    }\r\n\r\n    //Name for this is generated from the skinDef " +
                    "generator\r\n");
            
            #line 78 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 foreach(var skin in dynamicSkin.skinDefs) { 
            
            #line default
            #line hidden
            this.Write("    static partial void ");
            
            #line 79 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(skin.bodyName.ToUpperCamelCase()));
            
            #line default
            #line hidden
            
            #line 79 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(skin.name.ToUpperCamelCase()));
            
            #line default
            #line hidden
            this.Write("SkinAdded (SkinDef skinDef, GameObject bodyPrefab)\r\n    {\r\n      SkinDefs.Add(ski" +
                    "nDef.nameToken, skinDef);\r\n    }\r\n");
            
            #line 83 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////" +
                    "/\r\n    ////// Local Functions (these should not need to be changed when added to" +
                    " different skins)\r\n    \r\n    //private static void SkinDefApply(On.RoR2.SkinDef." +
                    "orig_Apply orig, SkinDef self, GameObject modelObject) //Old SkinDefApply for us" +
                    "e w/ mmhook\r\n    private static void SkinDefApply(Action<SkinDef, GameObject> or" +
                    "ig, SkinDef self, GameObject modelObject)\r\n    {\r\n      orig(self, modelObject);" +
                    "\r\n\r\n      RemoveInvalidModelObjects();\r\n      \r\n      ModifiedObjects.TryGetValu" +
                    "e(modelObject, out var modificatons);\r\n      \r\n      try\r\n      {\r\n\r\n        //i" +
                    "f we are on another character/skin\r\n        SkinDef test;\r\n        var found = S" +
                    "kinDefs.TryGetValue(self.nameToken, out test);\r\n        if(!found)\r\n        {\r\n " +
                    "         if (modificatons != null)\r\n          {\r\n            ClearSkinModificati" +
                    "ons(LastModelObject, modificatons);\r\n          }\r\n          return;\r\n        }\r\n" +
                    "\r\n        if (modificatons == null)\r\n        {\r\n          //otherwise if are now" +
                    " applying modded skin and no modifcations have been made, then apply modificatio" +
                    "ns\r\n\r\n          //create new Applied Entry and pass into Apply\r\n          Applie" +
                    "dModifications NewMods = new AppliedModifications();\r\n          ModifiedObjects." +
                    "Add(modelObject, NewMods);\r\n          ApplySkinModifications(self, modelObject, " +
                    "NewMods);\r\n        }\r\n      }\r\n      catch (Exception e)\r\n      {\r\n        //err" +
                    "or logging may need to be skin specific\r\n        InstanceLogger.LogWarning(\"An e" +
                    "rror occured while adding accessories to a skin\");\r\n        InstanceLogger.LogEr" +
                    "ror(e);\r\n      }\r\n\r\n      //print heiarchy\r\n      //Utils.readheiarchy(modelObje" +
                    "ct);\r\n    }\r\n\r\n    private static void RemoveInvalidModelObjects()\r\n    {\r\n     " +
                    " foreach (var modelObject in ModifiedObjects.Keys.Where(el => !el).ToList())\r\n  " +
                    "    {\r\n        ModifiedObjects.Remove(modelObject);\r\n      }\r\n    }\r\n\r\n    priva" +
                    "te static void ClearSkinModifications(GameObject modelObject, AppliedModificatio" +
                    "ns modifications)\r\n    {\r\n      //NOTE: modifications that modify the base bone " +
                    "list need to have their bones removed first before destruction\r\n      //Modifica" +
                    "tions that modify the base bone list have to be removed in reverse order in orde" +
                    "r to maintain correct indexing\r\n\r\n      //Clear Mods that modify base bone list," +
                    " these need to be done in reverse order\r\n      while (modifications.BaseModelMod" +
                    "ifications.Count != 0)\r\n      {\r\n        var mod = modifications.BaseModelModifi" +
                    "cations.Pop();\r\n\r\n        clearModification(mod, modelObject, modifications);\r\n " +
                    "     }\r\n\r\n      //clear rest of mods\r\n      while (modifications.OtherModificati" +
                    "ons.Count != 0)\r\n      {\r\n        clearModification(modifications.OtherModificat" +
                    "ions[0], modelObject, modifications); //clearmodification calls remove on applie" +
                    "d Mod.\r\n      }\r\n    \r\n      //remove the object from modified once all mods are" +
                    " cleared\r\n      ModifiedObjects.Remove(modelObject);\r\n    }\r\n\r\n    private stati" +
                    "c void ApplySkinModifications(SkinDef skindef, GameObject modelObject, AppliedMo" +
                    "difications modifications)\r\n    {\r\n      var characterModel = modelObject.GetCom" +
                    "ponent<CharacterModel>();\r\n\r\n      LastModelObject = modelObject;\r\n      foreach" +
                    " (var mod in ModificationList)\r\n      {\r\n        if(mod.parentSkinToken == skind" +
                    "ef.nameToken)\r\n          ApplyModification(modelObject, characterModel, mod, mod" +
                    "ifications);\r\n      }\r\n    }\r\n\r\n    /// <summary>\r\n    /// \r\n    /// </summary>\r" +
                    "\n    /// <param name=\"modelObject\">GameObject of ModelObject</param>\r\n    /// <p" +
                    "aram name=\"modifications\">List for Storing Modifctions</param>\r\n    /// <param n" +
                    "ame=\"characterModel\">Character Model of ModelObject</param>\r\n    /// <param name" +
                    "=\"modification\">Modification to be apllied</param>\r\n    private static void Appl" +
                    "yModification(GameObject modelObject, CharacterModel characterModel, Modificatio" +
                    "n modification, AppliedModifications modifications)\r\n    {\r\n      //Get aramture" +
                    " bone that new prefab will be parented to\r\n      var bodyname = modification.bod" +
                    "yname;\r\n      var parentname = modification.parentname;\r\n\r\n      var parentBone " +
                    "= Utils.FindChildInTree(modelObject.transform, parentname);\r\n      //var parentB" +
                    "one = modelObject.transform.Find(ChildHelper.GetPath(bodyname, parentname));\r\n\r\n" +
                    "      GameObject newPart;\r\n\r\n      //we have to instantiate the prefabs in two d" +
                    "ifferent ways based on if they affect the model or not\r\n      if (modification.a" +
                    "ffectsbasemodel)\r\n      {\r\n        //instantiate the model\r\n        newPart = Ga" +
                    "meObject.Instantiate(modification.prefab, parentBone, false);\r\n        newPart.n" +
                    "ame = Utils.RemoveCloneNaming(newPart.name);\r\n        modification.instance = ne" +
                    "wPart;\r\n        modification.inst_armature = newPart; //the armature of the modi" +
                    "fications that affect the base mode is the whole prefab\r\n\r\n        /////////////" +
                    "//////////////////////////////////////////////\r\n        /// Add Bones to Base Ar" +
                    "mature here\r\n        var skinRenderers = DynamicSkinHelpers.GetBaseSkinRenderers" +
                    "(modelObject);\r\n\r\n        var newBones = skinRenderers[0].bones.ToList();//assum" +
                    "ption is that we find a skinrenderer here, if not then whoops\r\n\r\n        var new" +
                    "BoneIndex = DynamicSkinHelpers.FindBoneIndex2(parentBone, newBones);\r\n        //" +
                    "insert new bones into array at end of array\r\n        var modBoneArray = DynamicS" +
                    "kinHelpers.BoneArrayBuilder(modification.instance.transform);\r\n        newBones." +
                    "InsertRange(newBoneIndex, modBoneArray);\r\n\r\n        //add index and bonecount to" +
                    " modification\r\n        modification.boneIndex = newBoneIndex;\r\n        modificat" +
                    "ion.boneCount = modBoneArray.Length;\r\n\r\n        //assign bones to skin renderers" +
                    "\r\n        foreach (var renderer in skinRenderers)\r\n        {\r\n          renderer" +
                    ".bones = newBones.ToArray();\r\n        }\r\n\r\n        modifications.BaseModelModifi" +
                    "cations.Push(modification);\r\n\r\n        /// Add Bones to Base Armature here\r\n    " +
                    "    ///////////////////////////////////////////////////////////\r\n      }\r\n      " +
                    "else\r\n      {\r\n        //instantiate it w/ model as parent\r\n        newPart = Ga" +
                    "meObject.Instantiate(modification.prefab, modelObject.transform, false);\r\n      " +
                    "  newPart.name = Utils.RemoveCloneNaming(newPart.name);\r\n        modification.in" +
                    "stance = newPart;\r\n\r\n        var armature = DynamicSkinHelpers.GetArmature(newPa" +
                    "rt);\r\n\r\n        //if (armature == null)\r\n        //  Debug.Log(\"Armature not fou" +
                    "nd\");\r\n        //else\r\n        //  Debug.Log(\"armature found: \" + armature.name)" +
                    ";\r\n\r\n        //then parent the armature to the parentboned\r\n        armature.tra" +
                    "nsform.SetParent(parentBone, false);\r\n        modification.inst_armature = armat" +
                    "ure.gameObject;\r\n      }\r\n      modification.instance = newPart;\r\n\r\n      //TODO" +
                    ": add a way to load multiple DynamicBone Scripts for a single modification\r\n    " +
                    "\r\n      ///////////////////////////////////////////////////////////\r\n      /// A" +
                    "dd dynamic bones stuff here\r\n      /// Things like DynamicBones Component, assig" +
                    "ning values to dynamic bones component, adding DB_Colliders and editing them, et" +
                    "c.\r\n      if(modification.dynamicBoneData != null)\r\n      {\r\n      \r\n\r\n        /" +
                    "/======================================\r\n        //Add Dynamic Bone Component\r\n " +
                    "       DynamicBone DB = modification.instance.AddComponent<DynamicBone>();\r\n    " +
                    "    modification.inst_dynamicBone = DB;\r\n\r\n        //===========================" +
                    "===========\r\n        /// Add DynamicBones Colliders to other armature bones (Nee" +
                    "d to do this before Modifying Dynamic Bones component as we add them to the DB l" +
                    "ist during modification)\r\n        List<DynamicBoneCollider> bonelist = new List<" +
                    "DynamicBoneCollider>();\r\n\r\n        foreach (var colliderData in modification.dyn" +
                    "amicBoneData.m_Colliders)\r\n        {\r\n          var parent = Utils.FindChildInTr" +
                    "ee(modelObject.transform, colliderData.m_parent_name);\r\n          //var parent =" +
                    " modelObject.transform.Find(ChildHelper.GetPath(bodyname, colliderData.m_parent_" +
                    "name));\r\n          \r\n          var bonecollider = parent.gameObject.AddComponent" +
                    "<DynamicBoneCollider>();\r\n\r\n          bonecollider.m_Direction = colliderData.m_" +
                    "Direction;\r\n          bonecollider.m_Center = colliderData.m_Center;\r\n          " +
                    "bonecollider.m_Bound = colliderData.m_Bound;\r\n          bonecollider.m_Radius = " +
                    "colliderData.m_Radius;\r\n          bonecollider.m_Height = colliderData.m_Height;" +
                    "\r\n\r\n          bonelist.Add(bonecollider);\r\n        }\r\n\r\n        modification.ins" +
                    "t_DB_colliders = bonelist;\r\n\r\n        //======================================\r\n" +
                    "        // Modify DynamicBones Component with data\r\n\r\n        var root = Utils.F" +
                    "indChildInTree(modification.inst_armature.transform, modification.dynamicBoneDat" +
                    "a.m_Root);\r\n\r\n        DB.m_Root = root;\r\n        DB.m_Damping = modification.dyn" +
                    "amicBoneData.m_Damping;\r\n        DB.m_DampingDistrib = modification.dynamicBoneD" +
                    "ata.m_DampingDistrib;\r\n        DB.m_Elasticity = modification.dynamicBoneData.m_" +
                    "Elasticity;\r\n        DB.m_ElasticityDistrib = modification.dynamicBoneData.m_Ela" +
                    "sticityDistrib;\r\n        DB.m_Stiffness = modification.dynamicBoneData.m_Stiffne" +
                    "ss;\r\n        DB.m_StiffnessDistrib = modification.dynamicBoneData.m_StiffnessDis" +
                    "trib;\r\n        DB.m_Inert = modification.dynamicBoneData.m_Inert;\r\n        DB.m_" +
                    "InertDistrib = modification.dynamicBoneData.m_InertDistrib;\r\n        DB.m_Radius" +
                    " = modification.dynamicBoneData.m_Radius;\r\n        DB.m_RadiusDistrib = modifica" +
                    "tion.dynamicBoneData.m_RadiusDistrib;\r\n        DB.m_EndLength = modification.dyn" +
                    "amicBoneData.m_EndLength;\r\n        DB.m_EndOffset = modification.dynamicBoneData" +
                    ".m_EndOffset;\r\n        DB.m_Gravity = modification.dynamicBoneData.m_Gravity;\r\n " +
                    "       DB.m_Force = modification.dynamicBoneData.m_Force;\r\n\r\n        DB.m_Collid" +
                    "ers = bonelist;\r\n        DB.m_Exclusions = new List<Transform>();\r\n        forea" +
                    "ch (var exclude in modification.dynamicBoneData.m_Exclusions)\r\n        {\r\n      " +
                    "    //NOTE: Assumption here is that the dynamic bone root is part of the new arm" +
                    "ature and we are only excluding bones located in root\r\n          var transform =" +
                    " Utils.FindChildInTree(root, exclude);\r\n\r\n          if (transform != null)\r\n    " +
                    "        DB.m_Exclusions.Add(transform);\r\n          else\r\n            Debug.LogWa" +
                    "rning(\"Tried to exclude a transform that could not be found\");\r\n        }\r\n\r\n\r\n " +
                    "       DB.m_FreezeAxis = modification.dynamicBoneData.m_FreezeAxis;\r\n\r\n        /" +
                    "/TODO: Read DB and compare it to what\'s made in OG mod cause skirt is behaving o" +
                    "ddly\r\n    \r\n      }\r\n      /// Add dynamic bones stuff here\r\n      /////////////" +
                    "//////////////////////////////////////////////\r\n\r\n      ////////////////////////" +
                    "///////////////////////////////////\r\n      /// Add renderers to the character\'s " +
                    "renderer list\r\n\r\n      //get renderers\r\n      var renderers = newPart.GetCompone" +
                    "ntsInChildren<SkinnedMeshRenderer>(true);\r\n\r\n      //resize render array to acco" +
                    "unt for new renderers\r\n      Array.Resize(ref characterModel.baseRendererInfos, " +
                    "characterModel.baseRendererInfos.Length + renderers.Length);\r\n\r\n      //NOTE: Ne" +
                    "ed to save the number of renderers added to the character render info so we can " +
                    "remove them cleanly. Probably add this to modifications\r\n      if (renderers.Len" +
                    "gth != 0)\r\n      {\r\n        int i = renderers.Length;\r\n        foreach (var rend" +
                    "erer in renderers)\r\n        {\r\n          //2 to add - 3 in\r\n          //resize a" +
                    "rray to 5\r\n          //first is added at 5-2 (3) which is position 4\r\n          " +
                    "//second is added at 5-1 (4) which is position 5\r\n          //exits\r\n\r\n         " +
                    " characterModel.baseRendererInfos[characterModel.baseRendererInfos.Length - i] =" +
                    " new CharacterModel.RendererInfo\r\n          {\r\n            renderer = renderers[" +
                    "renderers.Length - i],\r\n            ignoreOverlays = false,\r\n            default" +
                    "ShadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On,\r\n            def" +
                    "aultMaterial = renderer.sharedMaterial\r\n          };\r\n\r\n          i--; //decreme" +
                    "nt i to reach the next renederer\r\n        }\r\n      }\r\n      /// Add renderers to" +
                    " the character\'s renderer list\r\n      //////////////////////////////////////////" +
                    "/////////////////\r\n\r\n      //Push to applied modifications when done\r\n      modi" +
                    "fications.OtherModifications.Add(modification);\r\n    }\r\n\r\n    private static voi" +
                    "d clearModification(Modification modification, GameObject modelObject, AppliedMo" +
                    "difications modifications)\r\n    {\r\n      //Destroy Dynamic Bones colliders\r\n    " +
                    "  if(modification.inst_DB_colliders != null)\r\n      {     \r\n        foreach (var" +
                    " collider in modification.inst_DB_colliders)\r\n        {\r\n          Destroy(colli" +
                    "der);\r\n        }\r\n      }\r\n\r\n      //Remove Additions to Bone Arrays\r\n      if (" +
                    "modification.affectsbasemodel)\r\n      {\r\n        var renderers = DynamicSkinHelp" +
                    "ers.GetBaseSkinRenderers(modelObject);\r\n        var oldBones = renderers[0].bone" +
                    "s.ToList();\r\n\r\n        oldBones.RemoveRange(modification.boneIndex, modification" +
                    ".boneCount);\r\n\r\n        foreach (var renderer in renderers)\r\n        {\r\n        " +
                    "  renderer.bones = oldBones.ToArray();\r\n        }\r\n      }\r\n\r\n      //Destroy Dy" +
                    "namic Bones Component (Probably don\'t have to do this since it will be destroyed" +
                    " along with PrefabInstance if parented to it)\r\n      Destroy(modifications.Other" +
                    "Modifications[0].inst_dynamicBone);\r\n      //Destroy Armature\r\n      Destroy(mod" +
                    "ifications.OtherModifications[0].inst_armature);\r\n      //Destroy Prefab Instanc" +
                    "e\r\n      Destroy(modifications.OtherModifications[0].instance);\r\n\r\n      bool re" +
                    "moved = modifications.OtherModifications.Remove(modification);\r\n      if (!remov" +
                    "ed) InstanceLogger.LogError(\"Skin Modification was not removed\");\r\n    }\r\n\r\n    " +
                    "////// Local Functions\r\n    ////////////////////////////////////////////////////" +
                    "////////////////////////\r\n\r\n    ////////////////////////////////////////////////" +
                    "////////////////////////////\r\n    ////// Local Classes\r\n    class Modification\r\n" +
                    "    {\r\n\r\n      public Modification(string PrefabPath, string ParentName, string " +
                    "BodyName, string ParentSkinToken, bool AffectsBaseModel, AssetBundle assetBundle" +
                    ")\r\n      {\r\n        bodyname = BodyName;\r\n        prefabpath = PrefabPath;\r\n    " +
                    "    parentname = ParentName;\r\n        parentSkinToken = ParentSkinToken;\r\n      " +
                    "  affectsbasemodel = AffectsBaseModel;\r\n        prefab = assetBundle.LoadAsset<G" +
                    "ameObject>(@prefabpath);\r\n        if (prefab == null) { Debug.LogWarning(\"Asset " +
                    "at \" + PrefabPath + \" was not loaded\"); } //DEBUG check for if asset was not loa" +
                    "ded\r\n      }\r\n\r\n      //////////////////////////////////////////////////////\r\n  " +
                    "    /// These are created when the Modification is created\r\n      public string " +
                    "prefabpath;\r\n      public string bodyname; //Name of the base BodyName. i.e. Mer" +
                    "cBody or MageBody\r\n      public string parentname; //the name of the bone we wan" +
                    "t to parent this modification to\r\n      public GameObject prefab;\r\n      public " +
                    "bool affectsbasemodel; //if the modification affects the base model then we need" +
                    " to do additional steps\r\n      //TODO: Add Support for multiple Dynamic Bone Scr" +
                    "ipts per modification\r\n      public DynamicBoneData dynamicBoneData;\r\n      publ" +
                    "ic string parentSkinToken;\r\n      /// \r\n      //////////////////////////////////" +
                    "////////////////////\r\n\r\n      //////////////////////////////////////////////////" +
                    "////\r\n      /// Used for bones that need to be added to base model\r\n      public" +
                    " int boneIndex; //index of bone in bone array, created on modification\r\n      pu" +
                    "blic int boneCount; //number of bones in prefab bone armature\r\n                 " +
                    "           ///\r\n      //////////////////////////////////////////////////////\r\n\r\n" +
                    "      //////////////////////////////////////////////////////\r\n      /// These ob" +
                    "jects are instanceated and destroyed on skinDefApply\r\n      public GameObject in" +
                    "stance; //The created instance of the prefab attatched to the character\r\n      p" +
                    "ublic GameObject inst_armature; //the armature of the created instance\r\n    \r\n  " +
                    "  //TODO: add support for multiple DynamicBone Scripts per modification\r\n      p" +
                    "ublic DynamicBone inst_dynamicBone; //the dynamic bone attatched to the instance" +
                    "\r\n      public List<DynamicBoneCollider> inst_DB_colliders = new List<DynamicBon" +
                    "eCollider>(); //List of Dynamic Bone Colliders that were attatched to other bone" +
                    "s for this modification\r\n                                                       " +
                    "                                  ///\r\n      ///////////////////////////////////" +
                    "///////////////////\r\n\r\n      //This only contained the Skinned Mesh Renderers an" +
                    "d I think I can do these inline instead\r\n      // //////////////////////////////" +
                    "////////////////////////\r\n      // /// These don\'t seem to be created or destroy" +
                    "ed and are just assigned to\r\n      // \r\n      // //Note: it looks like all the m" +
                    "esh renderers are using the same bone list as the base code only ever looked at " +
                    "the one and assigned to both\r\n      // //these were taken from the meshes at roo" +
                    "t of the model\r\n      // SkinnedMeshRenderer[] meshRenderers;\r\n      // \r\n      " +
                    "// /// These don\'t seem to be created or destroyed and are just assigned to\r\n   " +
                    "   // //////////////////////////////////////////////////////\r\n    }\r\n\r\n    class" +
                    " AppliedModifications\r\n    {\r\n      public Stack<Modification> BaseModelModifica" +
                    "tions = new Stack<Modification>();\r\n      public List<Modification> OtherModific" +
                    "ations = new List<Modification>();//storage for modifications\r\n    }\r\n\r\n\r\n    //" +
                    "Data classes include strings in place of transforms as we need to search for the" +
                    " transforms when we load the data in\r\n    class DynamicBoneData\r\n    {\r\n      pu" +
                    "blic DynamicBoneData(string root,\r\n                     float damping, Animation" +
                    "Curve damping_dist,\r\n                     float elasticity, AnimationCurve elast" +
                    "icity_dist,\r\n                     float stiffness, AnimationCurve stiffness_dist" +
                    ",\r\n                     float inert, AnimationCurve inert_dist,\r\n               " +
                    "      //float friction, AnimationCurve friction_dist, //NOTE: looks like ROR2 is" +
                    " using an older version of DynBone that doesn\'t have friction\r\n                 " +
                    "    float radius, AnimationCurve radius_dist,\r\n                     float end_le" +
                    "ngth, Vector3 end_offset,\r\n                     Vector3 gravity, Vector3 force,\r" +
                    "\n                     List<DynamicBoneColliderData> colliders,\r\n                " +
                    "     List<string> exclusions,\r\n                     DynamicBone.FreezeAxis freez" +
                    "e_axis)\r\n      {\r\n        m_Root = root;\r\n        m_Damping = damping;\r\n        " +
                    "m_DampingDistrib = damping_dist;\r\n        m_Elasticity = elasticity;\r\n        m_" +
                    "ElasticityDistrib = elasticity_dist;\r\n        m_Stiffness = stiffness;\r\n        " +
                    "m_StiffnessDistrib = stiffness_dist;\r\n        m_Inert = inert;\r\n        m_InertD" +
                    "istrib = inert_dist;\r\n        //new_DB.m_Friction = friction;\r\n        //new_DB." +
                    "m_FrictionDistrib = friction_dist;\r\n        m_Radius = radius;\r\n        m_Radius" +
                    "Distrib = radius_dist;\r\n        m_EndLength = end_length;\r\n        m_EndOffset =" +
                    " end_offset;\r\n        m_Gravity = gravity;\r\n        m_Force = force;\r\n        m_" +
                    "Colliders = colliders;\r\n        m_Exclusions = exclusions;\r\n        m_FreezeAxis" +
                    " = freeze_axis;\r\n      }\r\n    \r\n      //would include string for parent_name but" +
                    " all dynamicbones should be created on modification_instance\r\n\r\n      public str" +
                    "ing m_Root;\r\n      public float m_Damping;\r\n      public AnimationCurve m_Dampin" +
                    "gDistrib;\r\n      public float m_Elasticity;\r\n      public AnimationCurve m_Elast" +
                    "icityDistrib;\r\n      public float m_Stiffness;\r\n      public AnimationCurve m_St" +
                    "iffnessDistrib;\r\n      public float m_Inert;\r\n      public AnimationCurve m_Iner" +
                    "tDistrib;\r\n      //public float friction; public AnimationCurve friction_dist; /" +
                    "/NOTE: looks like ROR2 is using an older version of DynBone that doesn\'t have fr" +
                    "iction\r\n      public float m_Radius;\r\n      public AnimationCurve m_RadiusDistri" +
                    "b;\r\n      public float m_EndLength;\r\n      public Vector3 m_EndOffset;\r\n      pu" +
                    "blic Vector3 m_Gravity;\r\n      public Vector3 m_Force;\r\n      public List<Dynami" +
                    "cBoneColliderData> m_Colliders;\r\n      public List<string> m_Exclusions;\r\n      " +
                    "public DynamicBone.FreezeAxis m_FreezeAxis;\r\n    }\r\n\r\n    class DynamicBoneColli" +
                    "derData\r\n    {\r\n      public DynamicBoneColliderData(string parent_name, Dynamic" +
                    "BoneCollider.Direction direction, Vector3 Center, DynamicBoneCollider.Bound boun" +
                    "d, float radius, float heaight)\r\n      {\r\n        m_parent_name = parent_name;\r\n" +
                    "        m_Direction = direction;\r\n        m_Center = Center;\r\n        m_Bound = " +
                    "bound;\r\n        m_Radius = radius;\r\n        m_Height = heaight;\r\n      }\r\n\r\n    " +
                    "  public string m_parent_name;\r\n      public DynamicBoneCollider.Direction m_Dir" +
                    "ection;\r\n      public Vector3 m_Center;\r\n      public DynamicBoneCollider.Bound " +
                    "m_Bound;\r\n      public float m_Radius;\r\n      public float m_Height;\r\n\r\n    }\r\n\r" +
                    "\n    ////// Local Classes\r\n    /////////////////////////////////////////////////" +
                    "///////////////////////////\r\n  }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class DynamicSkinTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
