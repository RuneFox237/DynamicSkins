// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DynamicSkinBuilder
{
    using RoRSkinBuilder.Data;
    using RoRSkinBuilder;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class DynamicSkinTemplate : DynamicSkinTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using BepInEx.Logging;\r\nusing RoR2;\r\nusing System;\r\nusing System.Collections.Gene" +
                    "ric;\r\nusing System.Linq;\r\nusing UnityEngine;\r\nusing RuneFoxMods;\r\nusing MonoMod." +
                    "RuntimeDetour;\r\n\r\n\r\n//NameSpace and SkinName are generated from SkinDef Generato" +
                    "r\r\nnamespace ");
            
            #line 14 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dynamicSkin.modInfo.modName));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n  public partial class ");
            
            #line 16 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dynamicSkin.assetInfo.uccModName));
            
            #line default
            #line hidden
            this.Write("Plugin \r\n  {\r\n    ///////////////////////////////////////////////////////////\r\n  " +
                    "  /// Add Declerations of all Modifications here\r\n    ");
            
            #line 20 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 foreach(var mod in dynamicSkin.Mods) {
            
            #line default
            #line hidden
            this.Write("    Modification ");
            
            #line 21 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.Prefab.name));
            
            #line default
            #line hidden
            this.Write("Modification;\r\n    ");
            
            #line 22 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"    ///
    ///////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    /// Local Declarations
    public static SkinDef SkinDef { get; private set; }
    private static GameObject LastModelObject;

    //private static readonly Dictionary<GameObject, Modification> appliedModificatons = new Dictionary<GameObject, Modification>();
    private static List<Modification> ModificationList = new List<Modification>();//storage for modifications
    private static Dictionary<GameObject, AppliedModifications> ModifiedObjects = new Dictionary<GameObject, AppliedModifications>();

    //This uses Name of class 
    //private static SkinNamePlugin Instance { get; set; }
    //private static ManualLogSource InstanceLogger => Instance?.Logger;
    /// Local Declarations
    ///////////////////////////////////////////////////////////


    partial void BeforeStart()
    {
      Instance = this;

      //On.RoR2.SkinDef.Apply += SkinDefApply; //Old hook for use w/ mmhook
      new Hook(typeof(SkinDef).GetMethod(nameof(SkinDef.Apply)), (Action<Action<SkinDef, GameObject>, SkinDef, GameObject>) SkinDefApply).Apply();
    }

    partial void AfterStart()
    {
      //////////////////////////////////////////////////
      //Should Load all modifications here
      ");
            
            #line 54 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 foreach(var mod in dynamicSkin.Mods) {
      //ModificationName = new Modification("PrefabName.prefab", "ParentName", "BodyName", false, assetBundle);
      
            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 57 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.Prefab.name));
            
            #line default
            #line hidden
            this.Write("Modification = new Modification(\"");
            
            #line 57 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.Prefab.name));
            
            #line default
            #line hidden
            this.Write(".prefab\", \"");
            
            #line 57 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.ParentBone.name));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 57 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dynamicSkin.skinDef.bodyName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 57 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.AffectsBaseModel));
            
            #line default
            #line hidden
            this.Write(", assetBundle);\r\n      ");
            
            #line 58 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n      ");
            
            #line 60 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 foreach(var mod in dynamicSkin.Mods) { 
      //ModificationName.dynamicBoneData = null; //get from DB reader
      
            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 63 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.Prefab.name));
            
            #line default
            #line hidden
            this.Write("Modification.dynamicBoneData = ");
            
            #line 63 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DynamicBoneReader.CreateConstructor(mod.DynamicBone)));
            
            #line default
            #line hidden
            this.Write("\r\n      ");
            
            #line 64 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n      //add mods to mod list\r\n      ");
            
            #line 67 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 foreach(var mod in dynamicSkin.Mods) { 
      //ModificationList.Add(ModificationName);
      
            
            #line default
            #line hidden
            this.Write("      ModificationList.Add(");
            
            #line 70 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mod.Prefab.name));
            
            #line default
            #line hidden
            this.Write("Modification);\r\n      ");
            
            #line 71 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("      //Should Load all modifications here\r\n      ///////////////////////////////" +
                    "///////////////////\r\n    }\r\n\r\n    //Name for this is generated from the skinDef " +
                    "generator\r\n    static partial void ");
            
            #line 77 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dynamicSkin.skinDef.bodyName.ToUpperCamelCase()));
            
            #line default
            #line hidden
            
            #line 77 "C:\Users\kamba\Desktop\ROR2 Modding\MyCustomMods\Other\MyScripts\DynamicSkins\DynamicSkinsScripts\DynamicSkinsBuilder\DynamicSkinBuilder\DynamicSkinBuilder\DynamicSkinTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dynamicSkin.skinDef.name.ToUpperCamelCase()));
            
            #line default
            #line hidden
            this.Write("SkinAdded (SkinDef skinDef, GameObject bodyPrefab)\r\n    {\r\n      SkinDef = skinDe" +
                    "f;\r\n    }\r\n\r\n\r\n\r\n    ///////////////////////////////////////////////////////////" +
                    "/////////////////\r\n    ////// Local Functions (these should not need to be chang" +
                    "ed when added to different skins)\r\n    \r\n    //private static void SkinDefApply(" +
                    "On.RoR2.SkinDef.orig_Apply orig, SkinDef self, GameObject modelObject) //Old Ski" +
                    "nDefApply for use w/ mmhook\r\n    private static void SkinDefApply(Action<SkinDef" +
                    ", GameObject> orig, SkinDef self, GameObject modelObject)\r\n    {\r\n      orig(sel" +
                    "f, modelObject);\r\n\r\n      RemoveInvalidModelObjects();\r\n\r\n      ModifiedObjects." +
                    "TryGetValue(modelObject, out var modificatons);\r\n\r\n      try\r\n      {\r\n        /" +
                    "/if we are on another character/skin\r\n        if (self != SkinDef)\r\n        {\r\n " +
                    "         if (modificatons != null)\r\n          {\r\n            ClearSkinModificati" +
                    "ons(LastModelObject, modificatons);\r\n          }\r\n          return;\r\n        }\r\n" +
                    "\r\n        if (modificatons == null)\r\n        {\r\n          //otherwise if are now" +
                    " applying modded skin and no modifcations have been made, then apply modificatio" +
                    "ns\r\n\r\n          //create new Applied Entry and pass into Apply\r\n          Applie" +
                    "dModifications NewMods = new AppliedModifications();\r\n          ModifiedObjects." +
                    "Add(modelObject, NewMods);\r\n          ApplySkinModifications(modelObject, NewMod" +
                    "s);\r\n        }\r\n      }\r\n      catch (Exception e)\r\n      {\r\n        //error log" +
                    "ging may need to be skin specific\r\n        InstanceLogger.LogWarning(\"An error o" +
                    "ccured while adding accessories to a skin\");\r\n        InstanceLogger.LogError(e)" +
                    ";\r\n      }\r\n\r\n      //print heiarchy\r\n      //Utils.readheiarchy(modelObject);\r\n" +
                    "    }\r\n\r\n    private static void RemoveInvalidModelObjects()\r\n    {\r\n      forea" +
                    "ch (var modelObject in ModifiedObjects.Keys.Where(el => !el).ToList())\r\n      {\r" +
                    "\n        ModifiedObjects.Remove(modelObject);\r\n      }\r\n    }\r\n\r\n    private sta" +
                    "tic void ClearSkinModifications(GameObject modelObject, AppliedModifications mod" +
                    "ifications)\r\n    {\r\n      //NOTE: modifications that modify the base bone list n" +
                    "eed to have their bones removed first before destruction\r\n      //Modifications " +
                    "that modify the base bone list have to be removed in reverse order in order to m" +
                    "aintain correct indexing\r\n\r\n      //Clear Mods that modify base bone list, these" +
                    " need to be done in reverse order\r\n      while (modifications.BaseModelModificat" +
                    "ions.Count != 0)\r\n      {\r\n        var mod = modifications.BaseModelModification" +
                    "s.Pop();\r\n\r\n        clearModification(mod, modelObject, modifications);\r\n      }" +
                    "\r\n\r\n      //clear rest of mods\r\n      while (modifications.OtherModifications.Co" +
                    "unt != 0)\r\n      {\r\n        clearModification(modifications.OtherModifications[0" +
                    "], modelObject, modifications); //clearmodification calls remove on applied Mod." +
                    "\r\n      }\r\n    \r\n      //remove the object from modified once all mods are clear" +
                    "ed\r\n      ModifiedObjects.Remove(modelObject);\r\n    }\r\n\r\n    private static void" +
                    " ApplySkinModifications(GameObject modelObject, AppliedModifications modificatio" +
                    "ns)\r\n    {\r\n      var characterModel = modelObject.GetComponent<CharacterModel>(" +
                    ");\r\n\r\n      LastModelObject = modelObject;\r\n      foreach (var mod in Modificati" +
                    "onList)\r\n      {\r\n        ApplyModification(modelObject, characterModel, mod, mo" +
                    "difications);\r\n      }\r\n    }\r\n\r\n    /// <summary>\r\n    /// \r\n    /// </summary>" +
                    "\r\n    /// <param name=\"modelObject\">GameObject of ModelObject</param>\r\n    /// <" +
                    "param name=\"modifications\">List for Storing Modifctions</param>\r\n    /// <param " +
                    "name=\"characterModel\">Character Model of ModelObject</param>\r\n    /// <param nam" +
                    "e=\"modification\">Modification to be apllied</param>\r\n    private static void App" +
                    "lyModification(GameObject modelObject, CharacterModel characterModel, Modificati" +
                    "on modification, AppliedModifications modifications)\r\n    {\r\n      //Get aramtur" +
                    "e bone that new prefab will be parented to\r\n      var bodyname = modification.bo" +
                    "dyname;\r\n      var parentname = modification.parentname;\r\n\r\n      var parentBone" +
                    " = Utils.FindChildInTree(modelObject.transform, parentname);\r\n      //var parent" +
                    "Bone = modelObject.transform.Find(ChildHelper.GetPath(bodyname, parentname));\r\n\r" +
                    "\n      GameObject newPart;\r\n\r\n      //we have to instantiate the prefabs in two " +
                    "different ways based on if they affect the model or not\r\n      if (modification." +
                    "affectsbasemodel)\r\n      {\r\n        //instantiate the model\r\n        newPart = G" +
                    "ameObject.Instantiate(modification.prefab, parentBone, false);\r\n        newPart." +
                    "name = Utils.RemoveCloneNaming(newPart.name);\r\n        modification.instance = n" +
                    "ewPart;\r\n        modification.inst_armature = newPart; //the armature of the mod" +
                    "ifications that affect the base mode is the whole prefab\r\n\r\n        ////////////" +
                    "///////////////////////////////////////////////\r\n        /// Add Bones to Base A" +
                    "rmature here\r\n        var skinRenderers = DynamicSkinHelpers.GetBaseSkinRenderer" +
                    "s(modelObject);\r\n\r\n        var newBones = skinRenderers[0].bones.ToList();//assu" +
                    "mption is that we find a skinrenderer here, if not then whoops\r\n\r\n        var ne" +
                    "wBoneIndex = DynamicSkinHelpers.FindBoneIndex2(parentBone, newBones);\r\n        /" +
                    "/insert new bones into array at end of array\r\n        var modBoneArray = Dynamic" +
                    "SkinHelpers.BoneArrayBuilder(modification.instance.transform);\r\n        newBones" +
                    ".InsertRange(newBoneIndex, modBoneArray);\r\n\r\n        //add index and bonecount t" +
                    "o modification\r\n        modification.boneIndex = newBoneIndex;\r\n        modifica" +
                    "tion.boneCount = modBoneArray.Length;\r\n\r\n        //assign bones to skin renderer" +
                    "s\r\n        foreach (var renderer in skinRenderers)\r\n        {\r\n          rendere" +
                    "r.bones = newBones.ToArray();\r\n        }\r\n\r\n        modifications.BaseModelModif" +
                    "ications.Push(modification);\r\n\r\n        /// Add Bones to Base Armature here\r\n   " +
                    "     ///////////////////////////////////////////////////////////\r\n      }\r\n     " +
                    " else\r\n      {\r\n        //instantiate it w/ model as parent\r\n        newPart = G" +
                    "ameObject.Instantiate(modification.prefab, modelObject.transform, false);\r\n     " +
                    "   newPart.name = Utils.RemoveCloneNaming(newPart.name);\r\n        modification.i" +
                    "nstance = newPart;\r\n\r\n        var armature = DynamicSkinHelpers.GetArmature(newP" +
                    "art);\r\n\r\n        //if (armature == null)\r\n        //  Debug.Log(\"Armature not fo" +
                    "und\");\r\n        //else\r\n        //  Debug.Log(\"armature found: \" + armature.name" +
                    ");\r\n\r\n        //then parent the armature to the parentboned\r\n        armature.tr" +
                    "ansform.SetParent(parentBone, false);\r\n        modification.inst_armature = arma" +
                    "ture.gameObject;\r\n      }\r\n      modification.instance = newPart;\r\n\r\n      //TOD" +
                    "O: add a way to load multiple DynamicBone Scripts for a single modification\r\n   " +
                    " \r\n      ///////////////////////////////////////////////////////////\r\n      /// " +
                    "Add dynamic bones stuff here\r\n      /// Things like DynamicBones Component, assi" +
                    "gning values to dynamic bones component, adding DB_Colliders and editing them, e" +
                    "tc.\r\n      if(modification.dynamicBoneData != null)\r\n      {\r\n      \r\n\r\n        " +
                    "//======================================\r\n        //Add Dynamic Bone Component\r\n" +
                    "        DynamicBone DB = modification.instance.AddComponent<DynamicBone>();\r\n   " +
                    "     modification.inst_dynamicBone = DB;\r\n\r\n        //==========================" +
                    "============\r\n        /// Add DynamicBones Colliders to other armature bones (Ne" +
                    "ed to do this before Modifying Dynamic Bones component as we add them to the DB " +
                    "list during modification)\r\n        List<DynamicBoneCollider> bonelist = new List" +
                    "<DynamicBoneCollider>();\r\n\r\n        foreach (var colliderData in modification.dy" +
                    "namicBoneData.m_Colliders)\r\n        {\r\n          var parent = Utils.FindChildInT" +
                    "ree(modelObject.transform, colliderData.m_parent_name);\r\n          //var parent " +
                    "= modelObject.transform.Find(ChildHelper.GetPath(bodyname, colliderData.m_parent" +
                    "_name));\r\n          \r\n          var bonecollider = parent.gameObject.AddComponen" +
                    "t<DynamicBoneCollider>();\r\n\r\n          bonecollider.m_Direction = colliderData.m" +
                    "_Direction;\r\n          bonecollider.m_Center = colliderData.m_Center;\r\n         " +
                    " bonecollider.m_Bound = colliderData.m_Bound;\r\n          bonecollider.m_Radius =" +
                    " colliderData.m_Radius;\r\n          bonecollider.m_Height = colliderData.m_Height" +
                    ";\r\n\r\n          bonelist.Add(bonecollider);\r\n        }\r\n\r\n        modification.in" +
                    "st_DB_colliders = bonelist;\r\n\r\n        //======================================\r" +
                    "\n        // Modify DynamicBones Component with data\r\n\r\n        var root = Utils." +
                    "FindChildInTree(modification.inst_armature.transform, modification.dynamicBoneDa" +
                    "ta.m_Root);\r\n\r\n        DB.m_Root = root;\r\n        DB.m_Damping = modification.dy" +
                    "namicBoneData.m_Damping;\r\n        DB.m_DampingDistrib = modification.dynamicBone" +
                    "Data.m_DampingDistrib;\r\n        DB.m_Elasticity = modification.dynamicBoneData.m" +
                    "_Elasticity;\r\n        DB.m_ElasticityDistrib = modification.dynamicBoneData.m_El" +
                    "asticityDistrib;\r\n        DB.m_Stiffness = modification.dynamicBoneData.m_Stiffn" +
                    "ess;\r\n        DB.m_StiffnessDistrib = modification.dynamicBoneData.m_StiffnessDi" +
                    "strib;\r\n        DB.m_Inert = modification.dynamicBoneData.m_Inert;\r\n        DB.m" +
                    "_InertDistrib = modification.dynamicBoneData.m_InertDistrib;\r\n        DB.m_Radiu" +
                    "s = modification.dynamicBoneData.m_Radius;\r\n        DB.m_RadiusDistrib = modific" +
                    "ation.dynamicBoneData.m_RadiusDistrib;\r\n        DB.m_EndLength = modification.dy" +
                    "namicBoneData.m_EndLength;\r\n        DB.m_EndOffset = modification.dynamicBoneDat" +
                    "a.m_EndOffset;\r\n        DB.m_Gravity = modification.dynamicBoneData.m_Gravity;\r\n" +
                    "        DB.m_Force = modification.dynamicBoneData.m_Force;\r\n\r\n        DB.m_Colli" +
                    "ders = bonelist;\r\n        DB.m_Exclusions = new List<Transform>();\r\n        fore" +
                    "ach (var exclude in modification.dynamicBoneData.m_Exclusions)\r\n        {\r\n     " +
                    "     //NOTE: Assumption here is that the dynamic bone root is part of the new ar" +
                    "mature and we are only excluding bones located in root\r\n          var transform " +
                    "= Utils.FindChildInTree(root, exclude);\r\n\r\n          if (transform != null)\r\n   " +
                    "         DB.m_Exclusions.Add(transform);\r\n          else\r\n            Debug.LogW" +
                    "arning(\"Tried to exclude a transform that could not be found\");\r\n        }\r\n\r\n\r\n" +
                    "        DB.m_FreezeAxis = modification.dynamicBoneData.m_FreezeAxis;\r\n\r\n        " +
                    "//TODO: Read DB and compare it to what\'s made in OG mod cause skirt is behaving " +
                    "oddly\r\n    \r\n      }\r\n      /// Add dynamic bones stuff here\r\n      ////////////" +
                    "///////////////////////////////////////////////\r\n\r\n      ///////////////////////" +
                    "////////////////////////////////////\r\n      /// Add renderers to the character\'s" +
                    " renderer list\r\n\r\n      //get renderers\r\n      var renderers = newPart.GetCompon" +
                    "entsInChildren<SkinnedMeshRenderer>(true);\r\n\r\n      //resize render array to acc" +
                    "ount for new renderers\r\n      Array.Resize(ref characterModel.baseRendererInfos," +
                    " characterModel.baseRendererInfos.Length + renderers.Length);\r\n\r\n      //NOTE: N" +
                    "eed to save the number of renderers added to the character render info so we can" +
                    " remove them cleanly. Probably add this to modifications\r\n      if (renderers.Le" +
                    "ngth != 0)\r\n      {\r\n        int i = renderers.Length;\r\n        foreach (var ren" +
                    "derer in renderers)\r\n        {\r\n          //2 to add - 3 in\r\n          //resize " +
                    "array to 5\r\n          //first is added at 5-2 (3) which is position 4\r\n         " +
                    " //second is added at 5-1 (4) which is position 5\r\n          //exits\r\n\r\n        " +
                    "  characterModel.baseRendererInfos[characterModel.baseRendererInfos.Length - i] " +
                    "= new CharacterModel.RendererInfo\r\n          {\r\n            renderer = renderers" +
                    "[renderers.Length - i],\r\n            ignoreOverlays = false,\r\n            defaul" +
                    "tShadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On,\r\n            de" +
                    "faultMaterial = renderer.sharedMaterial\r\n          };\r\n\r\n          i--; //decrem" +
                    "ent i to reach the next renederer\r\n        }\r\n      }\r\n      /// Add renderers t" +
                    "o the character\'s renderer list\r\n      /////////////////////////////////////////" +
                    "//////////////////\r\n\r\n      //Push to applied modifications when done\r\n      mod" +
                    "ifications.OtherModifications.Add(modification);\r\n    }\r\n\r\n    private static vo" +
                    "id clearModification(Modification modification, GameObject modelObject, AppliedM" +
                    "odifications modifications)\r\n    {\r\n      //Destroy Dynamic Bones colliders\r\n   " +
                    "   if(modification.inst_DB_colliders != null)\r\n      {     \r\n        foreach (va" +
                    "r collider in modification.inst_DB_colliders)\r\n        {\r\n          Destroy(coll" +
                    "ider);\r\n        }\r\n      }\r\n\r\n      //Remove Additions to Bone Arrays\r\n      if " +
                    "(modification.affectsbasemodel)\r\n      {\r\n        var renderers = DynamicSkinHel" +
                    "pers.GetBaseSkinRenderers(modelObject);\r\n        var oldBones = renderers[0].bon" +
                    "es.ToList();\r\n\r\n        oldBones.RemoveRange(modification.boneIndex, modificatio" +
                    "n.boneCount);\r\n\r\n        foreach (var renderer in renderers)\r\n        {\r\n       " +
                    "   renderer.bones = oldBones.ToArray();\r\n        }\r\n      }\r\n\r\n      //Destroy D" +
                    "ynamic Bones Component (Probably don\'t have to do this since it will be destroye" +
                    "d along with PrefabInstance if parented to it)\r\n      Destroy(modifications.Othe" +
                    "rModifications[0].inst_dynamicBone);\r\n      //Destroy Armature\r\n      Destroy(mo" +
                    "difications.OtherModifications[0].inst_armature);\r\n      //Destroy Prefab Instan" +
                    "ce\r\n      Destroy(modifications.OtherModifications[0].instance);\r\n\r\n      bool r" +
                    "emoved = modifications.OtherModifications.Remove(modification);\r\n      if (!remo" +
                    "ved) InstanceLogger.LogError(\"Skin Modification was not removed\");\r\n    }\r\n\r\n   " +
                    " ////// Local Functions\r\n    ///////////////////////////////////////////////////" +
                    "/////////////////////////\r\n\r\n    ///////////////////////////////////////////////" +
                    "/////////////////////////////\r\n    ////// Local Classes\r\n    class Modification\r" +
                    "\n    {\r\n\r\n      public Modification(string PrefabPath, string ParentName, string" +
                    " BodyName, bool AffectsBaseModel, AssetBundle assetBundle)\r\n      {\r\n        bod" +
                    "yname = BodyName;\r\n        prefabpath = PrefabPath;\r\n        parentname = Parent" +
                    "Name;\r\n        affectsbasemodel = AffectsBaseModel;\r\n        prefab = assetBundl" +
                    "e.LoadAsset<GameObject>(@prefabpath);\r\n        if (prefab == null) { Debug.LogWa" +
                    "rning(\"Asset at \" + PrefabPath + \" was not loaded\"); } //DEBUG check for if asse" +
                    "t was not loaded\r\n      }\r\n\r\n      /////////////////////////////////////////////" +
                    "/////////\r\n      /// These are created when the Modification is created\r\n      p" +
                    "ublic string prefabpath;\r\n      public string bodyname; //Name of the base BodyN" +
                    "ame. i.e. MercBody or MageBody\r\n      public string parentname; //the name of th" +
                    "e bone we want to parent this modification to\r\n      public GameObject prefab;\r\n" +
                    "      public bool affectsbasemodel; //if the modification affects the base model" +
                    " then we need to do additional steps\r\n      //TODO: Add Support for multiple Dyn" +
                    "amic Bone Scripts per modification\r\n      public DynamicBoneData dynamicBoneData" +
                    ";\r\n\r\n      /// \r\n      //////////////////////////////////////////////////////\r\n\r" +
                    "\n      //////////////////////////////////////////////////////\r\n      /// Used fo" +
                    "r bones that need to be added to base model\r\n      public int boneIndex; //index" +
                    " of bone in bone array, created on modification\r\n      public int boneCount; //n" +
                    "umber of bones in prefab bone armature\r\n                            ///\r\n      /" +
                    "/////////////////////////////////////////////////////\r\n\r\n      /////////////////" +
                    "/////////////////////////////////////\r\n      /// These objects are instanceated " +
                    "and destroyed on skinDefApply\r\n      public GameObject instance; //The created i" +
                    "nstance of the prefab attatched to the character\r\n      public GameObject inst_a" +
                    "rmature; //the armature of the created instance\r\n    \r\n    //TODO: add support f" +
                    "or multiple DynamicBone Scripts per modification\r\n      public DynamicBone inst_" +
                    "dynamicBone; //the dynamic bone attatched to the instance\r\n      public List<Dyn" +
                    "amicBoneCollider> inst_DB_colliders = new List<DynamicBoneCollider>(); //List of" +
                    " Dynamic Bone Colliders that were attatched to other bones for this modification" +
                    "\r\n                                                                              " +
                    "           ///\r\n      //////////////////////////////////////////////////////\r\n\r\n" +
                    "      //This only contained the Skinned Mesh Renderers and I think I can do thes" +
                    "e inline instead\r\n      // /////////////////////////////////////////////////////" +
                    "/\r\n      // /// These don\'t seem to be created or destroyed and are just assigne" +
                    "d to\r\n      // \r\n      // //Note: it looks like all the mesh renderers are using" +
                    " the same bone list as the base code only ever looked at the one and assigned to" +
                    " both\r\n      // //these were taken from the meshes at root of the model\r\n      /" +
                    "/ SkinnedMeshRenderer[] meshRenderers;\r\n      // \r\n      // /// These don\'t seem" +
                    " to be created or destroyed and are just assigned to\r\n      // /////////////////" +
                    "/////////////////////////////////////\r\n    }\r\n\r\n    class AppliedModifications\r\n" +
                    "    {\r\n      public Stack<Modification> BaseModelModifications = new Stack<Modif" +
                    "ication>();\r\n      public List<Modification> OtherModifications = new List<Modif" +
                    "ication>();//storage for modifications\r\n    }\r\n\r\n\r\n    //Data classes include st" +
                    "rings in place of transforms as we need to search for the transforms when we loa" +
                    "d the data in\r\n    class DynamicBoneData\r\n    {\r\n      public DynamicBoneData(st" +
                    "ring root,\r\n                     float damping, AnimationCurve damping_dist,\r\n  " +
                    "                   float elasticity, AnimationCurve elasticity_dist,\r\n          " +
                    "           float stiffness, AnimationCurve stiffness_dist,\r\n                    " +
                    " float inert, AnimationCurve inert_dist,\r\n                     //float friction," +
                    " AnimationCurve friction_dist, //NOTE: looks like ROR2 is using an older version" +
                    " of DynBone that doesn\'t have friction\r\n                     float radius, Anima" +
                    "tionCurve radius_dist,\r\n                     float end_length, Vector3 end_offse" +
                    "t,\r\n                     Vector3 gravity, Vector3 force,\r\n                     L" +
                    "ist<DynamicBoneColliderData> colliders,\r\n                     List<string> exclu" +
                    "sions,\r\n                     DynamicBone.FreezeAxis freeze_axis)\r\n      {\r\n     " +
                    "   m_Root = root;\r\n        m_Damping = damping;\r\n        m_DampingDistrib = damp" +
                    "ing_dist;\r\n        m_Elasticity = elasticity;\r\n        m_ElasticityDistrib = ela" +
                    "sticity_dist;\r\n        m_Stiffness = stiffness;\r\n        m_StiffnessDistrib = st" +
                    "iffness_dist;\r\n        m_Inert = inert;\r\n        m_InertDistrib = inert_dist;\r\n " +
                    "       //new_DB.m_Friction = friction;\r\n        //new_DB.m_FrictionDistrib = fri" +
                    "ction_dist;\r\n        m_Radius = radius;\r\n        m_RadiusDistrib = radius_dist;\r" +
                    "\n        m_EndLength = end_length;\r\n        m_EndOffset = end_offset;\r\n        m" +
                    "_Gravity = gravity;\r\n        m_Force = force;\r\n        m_Colliders = colliders;\r" +
                    "\n        m_Exclusions = exclusions;\r\n        m_FreezeAxis = freeze_axis;\r\n      " +
                    "}\r\n    \r\n      //would include string for parent_name but all dynamicbones shoul" +
                    "d be created on modification_instance\r\n\r\n      public string m_Root;\r\n      publ" +
                    "ic float m_Damping;\r\n      public AnimationCurve m_DampingDistrib;\r\n      public" +
                    " float m_Elasticity;\r\n      public AnimationCurve m_ElasticityDistrib;\r\n      pu" +
                    "blic float m_Stiffness;\r\n      public AnimationCurve m_StiffnessDistrib;\r\n      " +
                    "public float m_Inert;\r\n      public AnimationCurve m_InertDistrib;\r\n      //publ" +
                    "ic float friction; public AnimationCurve friction_dist; //NOTE: looks like ROR2 " +
                    "is using an older version of DynBone that doesn\'t have friction\r\n      public fl" +
                    "oat m_Radius;\r\n      public AnimationCurve m_RadiusDistrib;\r\n      public float " +
                    "m_EndLength;\r\n      public Vector3 m_EndOffset;\r\n      public Vector3 m_Gravity;" +
                    "\r\n      public Vector3 m_Force;\r\n      public List<DynamicBoneColliderData> m_Co" +
                    "lliders;\r\n      public List<string> m_Exclusions;\r\n      public DynamicBone.Free" +
                    "zeAxis m_FreezeAxis;\r\n    }\r\n\r\n    class DynamicBoneColliderData\r\n    {\r\n      p" +
                    "ublic DynamicBoneColliderData(string parent_name, DynamicBoneCollider.Direction " +
                    "direction, Vector3 Center, DynamicBoneCollider.Bound bound, float radius, float " +
                    "heaight)\r\n      {\r\n        m_parent_name = parent_name;\r\n        m_Direction = d" +
                    "irection;\r\n        m_Center = Center;\r\n        m_Bound = bound;\r\n        m_Radiu" +
                    "s = radius;\r\n        m_Height = heaight;\r\n      }\r\n\r\n      public string m_paren" +
                    "t_name;\r\n      public DynamicBoneCollider.Direction m_Direction;\r\n      public V" +
                    "ector3 m_Center;\r\n      public DynamicBoneCollider.Bound m_Bound;\r\n      public " +
                    "float m_Radius;\r\n      public float m_Height;\r\n\r\n    }\r\n\r\n    ////// Local Class" +
                    "es\r\n    ////////////////////////////////////////////////////////////////////////" +
                    "////\r\n  }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class DynamicSkinTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
