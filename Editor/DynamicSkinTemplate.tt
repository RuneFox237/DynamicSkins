<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="RoRSkinBuilder.Data" #>
<#@ import namespace="RoRSkinBuilder" #>
<#@ import namespace="DynamicSkins" #>
<#@ import namespace="UnityEngine" #>
using RoR2;
using System;
using System.Collections.Generic;
using UnityEngine;
using RuneFoxMods.DynamicSkins;
using MonoMod.RuntimeDetour;


//NameSpace and SkinName are generated from SkinDef Generator
namespace <#= info.assetInfo.uccModName #>
{
  public partial class <#= info.assetInfo.uccModName #>Plugin 
  { 
    static <#=info.Name#>Extension _<#=info.Name#>Extension = new <#=info.Name#>Extension();
    static DynamicSkinManager _DynamicSkinManager = new DynamicSkinManager();

    public class <#=info.Name#>Extension
    {
      ///////////////////////////////////////////////////////////
      /// Add Declerations of all Modifications here
<#  foreach(var skin in info.dynamicSkins) { 
    foreach(var mod in skin.modifications) {#>
      Modification <#= skin.skinDef.name + mod.prefab.name #>Modification;
<#    } 
   } #>
      ///
      ///////////////////////////////////////////////////////////
      
      internal void BeforeStart()
      {
        _DynamicSkinManager.InstanceLogger = Instance.Logger;
        new Hook(typeof(SkinDef).GetMethod(nameof(SkinDef.Apply)), (Action<Action<SkinDef, GameObject>, SkinDef, GameObject>) _DynamicSkinManager.SkinDefApply).Apply();
      }

      internal void AfterStart()
      {
        InitializeModifications();
        InitializeDynamicBones();
        AddModificationsToList();
      }

      internal void BeforeBodyCatalogInit()
      {
<#  foreach(var skin in info.dynamicSkins) { #>
        <#= skin.skinDef.bodyName + skin.skinDef.name #>SkinAddedEvent += onSkinAdded;
<#}#>
      }

      internal void AfterBodyCatalogInit(){}
      
      void InitializeModifications()
      {
<#  foreach(var skin in info.dynamicSkins) {
    int externalIndexer = -1;
    var rend = info.GetMainRenderer(skin);
    foreach(var mod in skin.modifications) {
      //ModificationName = new Modification("PrefabName.prefab", "ParentName", "BodyName", "SkinNameToken" false, assetBundle);
#>
        <#= skin.skinDef.name + mod.prefab.name #>Modification = new Modification("<#= mod.prefab.name #>.prefab", "<#= mod.parentBone.name #>", "<#= skin.skinDef.bodyName #>", "<#=skin.skinDef.CreateNameToken(info.modInfo.author)#>", <#=mod.affectsBaseModel?DynamicSkinHelpers.GetBoneIndexInList(mod.dynamicBone.transform, rend):externalIndexer--#>, <#= mod.affectsBaseModel?"true":"false"  #>, assetBundle);
<#   }
  } #>
      }

      void InitializeDynamicBones()
      {
<#  foreach(var skin in info.dynamicSkins) { 
    foreach(var mod in skin.modifications) {
    //ModificationName.dynamicBoneData = null; //get from DB reader
#>
        <#= skin.skinDef.name + mod.prefab.name #>Modification.dynamicBoneData = <#= DynamicBoneReader.CreateConstructor(mod.dynamicBone) #>
<# }
}#>
      }

      void AddModificationsToList()
      {
<#  foreach(var skin in info.dynamicSkins) { 
      var rend = info.GetMainRenderer(skin);
      int externalIndexer = -1;
      for(int i = 0; i< skin.modifications.Count; i++) {
      var mod = skin.modifications[i]; #>
        _DynamicSkinManager.AddModification("<#= skin.skinDef.CreateNameToken(info.modInfo.author) #>", <#=mod.affectsBaseModel?DynamicSkinHelpers.GetBoneIndexInList(mod.dynamicBone.transform, rend):externalIndexer--#>, <#= skin.skinDef.name + mod.prefab.name #>Modification);
<# } #>
    
<# } #>
      }

      static void onSkinAdded(object sender, SkinAddedArgs e)
      {
        _DynamicSkinManager.AddSkinDef(e.skinDef);
      }
    }
  }
}